In DevOps, Docker in Realtime Senario Interview Questions and Answers:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. Can you explain how Docker container differs from virtual machines?

EXPLAIN IN THIS ANSWER:-
━━━━━━━━━━━━━━━━━━━━━━━━
👉 Docker containers share the host OS kernel, making them lightweight and efficient. 
    They provide process-level isolation and package applications with their dependencies.

👉 Virtual Machines (VMs) virtualize hardware using a hypervisor, where each VM runs its own OS, 
    consuming more resources and offering stronger isolation.
-----------------------------------------------------------------------------------------------------------------------------------------

2. Can you explain Docker’s architecture and key components?

EXPLAIN IN THIS ANSWER:-
━━━━━━━━━━━━━━━━━━━━━━━━
"Docker follows a client-server architecture":
👉 The Docker Client communicates with the Docker Daemon, which manages containers using containerd. 
👉 Containers are created from Docker Images, which are stored in a Docker Registry like Docker Hub. 
👉 Docker provides networking and storage options for containers. 
👉 It also supports Docker Compose for multi-container applications. 
👉 The key advantage of Docker is its lightweight, portable, and efficient containerized environment.
-----------------------------------------------------------------------------------------------------------------------------------------

3. What is the difference between a Docker image and a container?

EXPLAIN IN THIS ANSWER:-
━━━━━━━━━━━━━━━━━━━━━━━━
Docker Image: 
👉 A read-only template containing application code, dependencies, and configurations needed to create a container.
👉 Images are static and stored in a Docker registry.

Docker Container:
👉 Docker Containers are dynamic and can be started, stopped, or deleted.
👉 Containers create isolated environments for running applications.
-----------------------------------------------------------------------------------------------------------------------------------------

4. 

































