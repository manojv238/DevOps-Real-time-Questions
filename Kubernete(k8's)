1. "Transition from Monolithic to Microservices" 
   Consider a company build some kind of monolithic architecture that handles a lot of products okay,
   now company is expanding and today industry is scalling so companies is expanding and then,
   monolithic architecture started causing problems so how do you think the company should shift it from
   monolithic to microservices and how to do deploy their containers and how can they implement kubernetes in it?

EXPLAIN IN THIS ANSWER:-
━━━━━━━━━━━━━━━━━━━━━━━━
👉 Monolithic Architecture is Everything built a single unit(code base), tightly coupled like different application(front-end,backend,DB)
   run as single code base.
   It’s simple to develop but hard to scalability —any change requires again will do redeploying the entire system.

👉 Microservices Architecture breaks the application into independent services, 
   each handling a specific function and communicating via APIs. 
   Each service can be deployed, scaled, and updated separately, making it more flexible and better fault isolation.
------------------------------------------------------------------------------------------------------------------------------------------

2. "Can you explain the Overview of Kubernetes Architecture"

EXPLAIN IN THIS ANSWER:-
━━━━━━━━━━━━━━━━━━━━━━━━
👉 Kubernetes mainly consists of two components we can say one is MASTER NODE and second one is WORKER NODE.
   so in masternode inside there are four components..., So by the name we can understood from CM it is master node so it is 

1.Kube controller manager --> Manages the multiple process which are running masternode adn it is combined all the process together
                              and let in inform the MasterNode thats wt happening so it's basically manages all the process.

2.kube API-Server         --> Its acts as front end of MasterNode so it exposes all the API of k8s to MasterNode component and
                              is responsible for like creating communication between MasterNode and WorkerNode.

3.kube scheduler          --> Schedules like work for the WorkerNode as it inside MasterNode so it will schedule work for 
                              different WorkNodes.

4.etcd (database)         --> It's basically Key-Values to store like (username&password) so if we have to store it in this inside k8s
                              then we will mainly store it inside ETCD. 
                          ---> Okay these are 4 components which are MasterNode.

And comes into WokerNode inside there are two components..,

1.Kubelet     --> The Kubelet on that Worker Node communicates with the API Server to ensure the Pods are running.

2.Kube-Proxy  --> Kube Proxy ensures networking and allows to communication between Pods and Services.
              ---> So this the basic k8s architeture.
-----------------------------------------------------------------------------------------------------------------------------------------

3. "Comparison between Kubernetes and Docker Swarm for container orchestration".

EXPLAIN IN THIS ANSWER:-
━━━━━━━━━━━━━━━━━━━━━━━━
"Kubernetes and Docker Swarm are both container orchestration tools, but they different in complexity, scalability, and automation".

1. Kubernetes is a powerful orchestration tool and It will automatically self-healing, automated scaling, and advanced networking,
   making it perfect for large applications that need reliability and automation.

2.Docker Swarm is lightweight and easy to set up,it offers great for quick and simple deployments, 
  but it doesn’t have the advanced automation and self-healing that compared to Kubernetes.











